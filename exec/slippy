#!/usr/bin/env python
import os
import argparse
import json
import slippy.inversion

p = argparse.ArgumentParser(
      description='''Static coseismic slip inversion tool. All of the 
      below arguments must be provided unless otherwise indicated.  
      The arguments can be provided through the command line, using a 
      JSON file, or a combination of both. The entries in the JSON 
      file are used as the default arguments which can then be 
      overwritten by command line arguments. The JSON file must be in 
      the current directory and be named "config.json". See the 
      contents of SlipPy/example/synthetic for example config files 
      and input files''')
      
p.add_argument('-v','--verbose',action='count',default=0,
               help='''controls verbosity''')

p.add_argument('--strike',type=float,
               help='''Strike of fault segment [degrees]''')  

p.add_argument('--dip',type=float,
               help='''Dip of fault segment [degrees]''')

p.add_argument('--length',type=float,
               help='''Length of fault segment [m]''')

p.add_argument('--width',type=float,
               help='''Width of fault segment [m]''')  

p.add_argument('--position',nargs=3,type=float,
               help='''Lon [degrees], lat [degrees], height [m] for 
               the top center of the fault segment.''')

p.add_argument('--Nlength',type=int,
               help='''Number of fault patches along the segment 
               length''')

p.add_argument('--Nwidth',type=int,
               help='''Number of fault patches along the segment 
               width''')

p.add_argument('--basis1',nargs=3,type=float,
               help='''First slip basis vector [left-lateral, thrust, 
               tensile]. the projection of fault slip onto this basis 
               vector will be positive. At least one basis vector must 
               be specified and each must be linearly independent''')
                      
p.add_argument('--basis2',nargs=3,type=float,
               help='''Second slip basis vector [left-lateral, thrust, 
               tensile]. the projection of fault slip onto this basis 
               vector will be positive. At least one basis vector must 
               be specified and each must be linearly independent''')
                      
p.add_argument('--basis3',nargs=3,type=float,
               help='''Third slip basis vector [left-lateral, thrust, 
               tensile]. The projection of fault slip onto this basis 
               vector will be positive. At least one basis vector must 
               be specified, and each must be linearly independent.''')
               
p.add_argument('--penalty',type=float,
               help='''regularization damping parameter''')

p.add_argument('--gps_input_file',type=str,
               help='''Name of the GPS input file. Must contain 
               one header row, which gets ignored, and 8 columns: 
               lon[degrees], lat[degrees], disp_e[m], disp_n[m], 
               disp_v[m], sigma_e[m], sigma_n[v], sigma_u[v]. This 
               argument can be ignored if there is no GPS data.''')

p.add_argument('--insar_input_file',type=str,
               help='''Name of the InSAR input file. Must contain 
               one header row, which gets ignored, and 7 columns: 
               lon[degrees], lat[degrees], disp_los[m], sigma_los[m], 
               V_e, V_n, V_u, where V is the look vector from the 
               ground to the satellite. Positive displacements 
               are toward the satellite. This argument can be ignored 
               if there is no InSAR data.''')

p.add_argument('--leveling_input_file',type=str,
               help='''Name of the Leveling input file. Must contain 
               one header row, which gets ignored, and 7 columns: 
               lon[degrees], lat[degrees], disp_los[m], sigma_los[m], 
               0, 0, 1, where [0,0,1] is the basis vector for 
               leveling measurements. Positive displacements are up. 
               The first row is the datum. This argument can be ignored 
               if there is no leveling data.''')
               
p.add_argument('--gps_output_file',type=str,
               help='''Name of the output file containing the GPS 
               displacements predicted by the best fit slip model. If 
               this is not specified then the output will be written 
               to stdout''')

p.add_argument('--insar_output_file',type=str,
               help='''Name of the output file containing the InSAR 
               displacements predicted by the best fit slip model. If 
               this is not specified then the output will be written 
               to stdout''')

p.add_argument('--leveling_output_file',type=str,
               help='''Name of the output file containing the leveling
               displacements predicted by the best fit slip model. If 
               this is not specified then the output will be written 
               to stdout''')

p.add_argument('--slip_output_file',type=str,
               help='''Name of the output file containing the best fit 
               slip model. If this is not specified then the output 
               will be written to stdout''')
p.add_argument('--plotter',type=str,
               help='''Either basemap or gmt.
               If you choose gmt, the code will not import basemap. 
               Coordinate transforms done through Python collections''')
                
if os.path.exists('config.json'):
  config_file = open('config.json','r')
  config_default = json.load(config_file)
else:
  config_default = {}

p.set_defaults(**config_default)
config = vars(p.parse_args())

# How many fault segments are we using? 
print("User has provided %d distinct fault segments " % (len(config["faults"])) )

# FOR EACH FAULT SEGMENT PROVIDED: 
num_basis_vectors = []
for key in config["faults"].keys():
  basis = []
  for b in ['basis1','basis2','basis3']:
    basis_i = config["faults"][key].pop(b,None)
    if basis_i is None:
      continue
    basis += [basis_i]
  num_basis_vectors.append(len(basis))

  # check to make sure at least one basis vector was given
  if len(basis) == 0:
    raise ValueError('at least one slip basis must be provided')

  config["faults"][key]['basis'] = basis

  for k,v in config["faults"][key].items():
    # make sure that no arguments other than files are None
    if (v is None) & ('file' not in k):
      raise ValueError('the argument "%s" must be provided' % k)

# make sure that at least one data file is given
if (config['gps_input_file'] is None) & (config['insar_input_file'] is None) & (config['leveling_input_file'] is None):
  raise ValueError('no data file was provided')

if len(set(num_basis_vectors))>1:
  raise Exception('different numbers of basis vectors for your fault segments. Please fix.');

slippy.inversion.main(config)
print("Done with inversion. Now use plot_slippy to visualize the results.");
